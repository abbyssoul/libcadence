
export PROJECT = cadence

# Project directory layout
TARGET_DIR = libs
TARGET = $(TARGET_DIR)/lib$(PROJECT).a

export PUBLIC_HEADERS = include
export BUILD_DIR = build
SRC_DIR = src
GEN_SRC_DIR = $(SRC_DIR)/generated
SRC_PROTO_DIR = $(SRC_DIR)/proto

TEST_SRC_DIR = test
TEST_NAME = test_$(PROJECT)
TEST_TARGET_DIR = $(BUILD_DIR)/bin
TEST_TAGRET = $(TEST_TARGET_DIR)/$(TEST_NAME)

export EXAMPLES_SRC_DIR = examples


src = $(wildcard $(SRC_DIR)/*.cpp) \
	  $(wildcard $(SRC_DIR)/async/*.cpp)

proto = $(wildcard $(SRC_PROTO_DIR)/*.capnp)

test_src =	$(wildcard $(TEST_SRC_DIR)/*.cpp) \
			$(wildcard $(TEST_SRC_DIR)/ci/*.cpp) \
			$(wildcard $(TEST_SRC_DIR)/async/*.cpp)

generated_proto = $(proto:.capnp=.capnp.c++)
generated_src = $(patsubst $(SRC_PROTO_DIR),$(GEN_SRC_DIR),$(generated_proto))


obj = $(addprefix $(BUILD_DIR)/, $(src:.cpp=.o))
test_obj = $(addprefix $(BUILD_DIR)/, $(test_src:.cpp=.o))
dep = $(obj:.o=.d)  # one dependency file for each source


CXXFLAGS += -std=c++14 -pipe -fstack-protector -ftemplate-depth=128
CXXFLAGS += -pedantic -Wall -Wextra -Wabi -Wfloat-equal \
-Wshadow -Wno-missing-field-initializers -Wno-missing-braces \
-Wcast-qual -Wno-sign-compare -Wno-multichar

# Add debug or release flags as required
ifdef dbg
	CXXFLAGS += -O0 -D _DEBUG -ggdb3 $(dbg)
else # Release optimizations
	CXXFLAGS += -Ofast -flto
endif


CPPFLAGS += -I$(PUBLIC_HEADERS) -D_FORTIFY_SOURCE=2
CPPFLAGS += -Iexternal/asio/asio/include \
			-I../libsolace/include

# LD flags and LIBS only make sense for tests and example when building a library project
LDFLAGS +=  -L$(TARGET_DIR) \
			-L../libsolace/build/src \
			-L../libsolace/build/libs/fmt/fmt

LIBS += -l$(PROJECT) -lsolace -lfmt -lrt -lm -lcppunit -pthread

# Export compiler options and extra libs for examples and tests
export CXXFLAGS
export CPPFLAGS
export LDFLAGS
export LIBS


all: $(PROJECT)
gen_proto: $(GEN_SRC_DIR) $(generated_src)

#-------------------------------------------------------------------------------
# Build the project
#-------------------------------------------------------------------------------
$(BUILD_DIR):
	mkdir -p $@

$(TARGET_DIR):
	mkdir -p $@

$(GEN_SRC_DIR):
	mkdir -p $@

$(generated_src): $(GEN_SRC_DIR)

%.capnp.c++: %.capnp
	capnp compile -oc++:$(GEN_SRC_DIR) --src-prefix=$(SRC_DIR)/proto -I/usr/include/ $<

%.capnp.h++: %.capnp
	capnp compile -oc++:$(GEN_SRC_DIR) --src-prefix=$(SRC_DIR)/proto -I/usr/include/ $<

$(src): $(generated_src)


$(BUILD_DIR)/%.o: %.cpp
	@mkdir -p $(dir $@)
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) -o $@ $<


$(TARGET): $(obj)
	@mkdir -p $(dir $@)
	$(AR) -rcs $@ $^

$(PROJECT): $(TARGET)


#-------------------------------------------------------------------------------
# Build examples
#-------------------------------------------------------------------------------
.PHONY: examples
examples:
	@$(MAKE) -C $(EXAMPLES_SRC_DIR) -f Makefile.in


#-------------------------------------------------------------------------------
# Build unit tests
#-------------------------------------------------------------------------------
$(TEST_TARGET_DIR):
	@mkdir -p $@

$(TEST_TAGRET): $(TARGET) $(TEST_TARGET_DIR)


$(TEST_TAGRET): $(test_obj)
	$(CXX) -o $@ $(CXXFLAGS) $(test_obj) $(LDFLAGS) $(LDFLAGS_test) $(LIBS)

.PHONY: test
test: $(TEST_TAGRET)
	./$(TEST_TAGRET)


#-------------------------------------------------------------------------------
# Include files dependencies
#-------------------------------------------------------------------------------
-include $(dep)   # include all dep files in the makefile

# rule to generate a dep file by using the C preprocessor
# (see man cpp for details on the -MM and -MT options)
$(BUILD_DIR)/%.d: %.cpp
	@echo "Building dep for $<"
	@mkdir -p $(dir $@)
	$(CPP) $(CXXFLAGS) $(CPPFLAGS) $< -MM -MT $(@:.d=.o) >$@

#-------------------------------------------------------------------------------
# Build docxygen documentation
#-------------------------------------------------------------------------------
$(DOC_TARGET):
	doxygen doc/Doxyfile

# Build project doxygen docs doxyfile.inc
doc: $(MODULE_HEADERS) $(MODULE_SRC) $(DOC_TARGET)



#-------------------------------------------------------------------------------
# Install
#-------------------------------------------------------------------------------

.PHONY: install
install: $(TARGET)
	@install -v -D -t $(DESTDIR)$(PREFIX)/bin $(TARGET)


.PHONY: uninstall
uninstall:
	$(RM) -f $(DESTDIR)$(PREFIX)/bin/$(PROJECT)


#-------------------------------------------------------------------------------
# Cleanup
#-------------------------------------------------------------------------------

.PHONY: clean
clean:
	$(RM) -rf $(TARGET_DIR) $(BUILD_DIR) $(DOC_TARGET) $(GEN_SRC_DIR)

#-------------------------------------------------------------------------------
# Code Quality Assurance
#-------------------------------------------------------------------------------
tools/cppcheck:
	# Get the latest cppcheck
	git clone --depth 1 https://github.com/danmar/cppcheck.git tools/cppcheck

tools/FlintPlusPlus:
	git clone --depth 1 https://github.com/L2Program/FlintPlusPlus.git tools/FlintPlusPlus

tools/cppcheck/cppcheck: tools/cppcheck
	git -C tools/cppcheck pull
	$(MAKE) -j2 -C tools/cppcheck cppcheck

tools/FlintPlusPlus/flint/flint++: tools/FlintPlusPlus
	git -C tools/FlintPlusPlus pull
	$(MAKE) -j2 -C tools/FlintPlusPlus/flint

cpplint: $(MODULE_HEADERS) $(MODULE_SRC)
	cpplint --recursive --exclude=${TEST_SRC_DIR}/ci/* ${PUBLIC_HEADERS} ${SRC_DIR} ${TEST_SRC_DIR} $(EXAMPLES_SRC_DIR)

cppcheck: $(MODULE_HEADERS) $(MODULE_SRC) tools/cppcheck/cppcheck
	tools/cppcheck/cppcheck --std=c++11 --std=posix -D __linux__ --inline-suppr -q --error-exitcode=2 \
	--enable=warning,performance,portability,missingInclude,information,unusedFunction \
	-I include -i test/ci ${SRC_DIR} ${TEST_SRC_DIR} $(EXAMPLES_SRC_DIR)

flint: $(MODULE_HEADERS) $(MODULE_SRC) tools/FlintPlusPlus/flint/flint++
	tools/FlintPlusPlus/flint/flint++ -v -r ${SRC_DIR} ${TEST_SRC_DIR} $(EXAMPLES_SRC_DIR)

scan-build: ANALYZE_MAKE
	cd $(ANALYZE_DIR) && scan-build $(MAKE)

tidy:
	clang-tidy -checks=llvm-*,modernize-*,clang-analyzer-*,-modernize-pass-by-value -header-filter=.* \
	${SRC_DIR}/*.cpp -- -I${PUBLIC_HEADERS} -Ilibs/fmt/ -std=c++14



codecheck: cpplint flint cppcheck #scan-build



#-------------------------------------------------------------------------------
# Runtime Quality Control
#-------------------------------------------------------------------------------

valgrind-sgcheck: $(TEST_TAGRET)
	# > 3.10 (not avaliable on trusty) --expensive-definedness-checks=yes --read-var-info=yes
	valgrind --trace-children=yes --track-fds=yes --redzone-size=128 --error-exitcode=4 \
	--tool=exp-sgcheck $(TEST_TAGRET)

valgrind-memcheck: $(TEST_TAGRET)
	valgrind --trace-children=yes --track-fds=yes --redzone-size=128 --error-exitcode=3 \
	--tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --partial-loads-ok=no \
	$(TEST_TAGRET)


# valgrind-sgcheck is broken for now :'(
verify: valgrind-memcheck


$(COVERAGE_REPORT): $(BUILD_DIR)/build_coverage
	# capture coverage info
	lcov --directory . --capture --output-file $@
	# filter out system and test code
	lcov --remove coverage.info 'test/*' '/usr/*' 'libs/*' --output-file $@

coverage: $(COVERAGE_REPORT)


coverage_report: $(COVERAGE_REPORT)
	lcov --list $(COVERAGE_REPORT)

